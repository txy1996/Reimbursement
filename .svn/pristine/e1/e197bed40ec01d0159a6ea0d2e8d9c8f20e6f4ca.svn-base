package com.zlt.system.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import java.util.List;

import org.apache.commons.dbutils.QueryRunner;

import com.zlt.system.dao.StatusDao;
import com.zlt.system.entity.Status;
import com.zlt.system.util.DBUtil;
import com.zlt.system.vo.ApplyreimVo;
import com.zlt.system.vo.Swarthy;

/**
 * ApprovalStatusDao实现类 包含增、改、查方法
 * 
 * @author xinzou
 * @date 2018/1/22
 * @version 1.0
 */

public class StatusDaoImpl extends CurrencyDaoImpl<Status> implements StatusDao {

	/**
	 * 查询申请状态方法实现 return:返回结果集
	 */
	public ArrayList<Status> selectAll() {
		String sql = "select * from status";
		ArrayList<Status> statuss = new ArrayList<Status>();
		try {
			statuss = (ArrayList<Status>) DBUtil.getQueryRunner().query(sql, new BeanListHandler<Status>(Status.class));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return statuss;
	}

	/**
	 * 模糊查询方法实现
	 * 
	 * @return 模糊查询结果集
	 */
	public ArrayList<Status> selectLike(String likeString) {

		return null;
	}

	/**
	 * 查看详情方法 return:返回申请状态对象
	 */
	@Override
	public Status selectDetails(int ApproId) {

		return null;
	}

	/**
	 * 报销审批驳回之后的意见修改
	 */
	@Override
	public void UpdateOpinion(Status status) {
		String sql = "UPDATE STATUS SET status2_opinion=?,status_result='未通过' WHERE app_abb=?";
		QueryRunner runner = new QueryRunner();
		try {
			runner.update(DBUtil.getConnection(), sql, status.getStatus2_opinion(), status.getApp_abb());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 审批通过后状态的改变
	 */
	@Override
	public void UpdateStatus(Status status) {

		String sql = "UPDATE STATUS SET status_result='通过' WHERE app_abb=?";
		QueryRunner runner = new QueryRunner();
		try {
			runner.update(DBUtil.getConnection(), sql, status.getApp_abb());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 第一次审批通过，第二次没有审批的
	 * 
	 * @author 任义平
	 */
	@Override
	public List<ApplyreimVo> FindByStatus(Status status) {
		String sql = "SELECT status1,status2,a.reim_id,a.emp_name,a.department_name,a.app_abb,a.money\r\n"
				+ "FROM STATUS,\r\n"
				+ "(SELECT reim_id,emp_name,department_name,app_abb,hotel_quarterage AS money FROM hotel\r\n"
				+ "UNION	\r\n"
				+ "SELECT reim_id,emp_name,department_name,app_abb,other_money AS money FROM other\r\n" + "UNION\r\n"
				+ "SELECT reim_id,emp_name,department_name,app_abb,traffic_money AS money FROM traffic\r\n"
				+ "UNION\r\n"
				+ "SELECT reim_id,emp_name,department_name,app_abb,travel_money AS money FROM travel) a  \r\n"
				+ "WHERE  status.`app_abb` IN (a.app_abb) AND status1='审批通过' AND status2='审核中'\r\n" + "";
		List<ApplyreimVo> list = new ArrayList<ApplyreimVo>();
		try {
			list = DBUtil.getQueryRunner().query(sql, new BeanListHandler<ApplyreimVo>(ApplyreimVo.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}
	/*
	 * 测试方法 public static void main(String[] args) { StatusDaoImpl ss = new
	 * StatusDaoImpl(); Status status = new Status(); List<ApplyreimVo> a =
	 * ss.FindByStatus(status); for(ApplyreimVo xx:a){
	 * System.out.println(xx.toString());
	 * 
	 * }
	 * 
	 * }
	 */

	@Override
	public List<ApplyreimVo> FindByAll(Status status) {
		String sql = "SELECT status1,a.reim_id,a.emp_name,a.department_name,a.app_abb,a.money" + " FROM STATUS,"
				+ " (SELECT reim_id,emp_name,department_name,app_abb,hotel_quarterage AS money FROM hotel" + " UNION"
				+ " SELECT reim_id,emp_name,department_name,app_abb,other_money AS money FROM other" + " UNION"
				+ " SELECT reim_id,emp_name,department_name,app_abb,traffic_money AS money FROM traffic" + " UNION"
				+ " SELECT reim_id,emp_name,department_name,app_abb,travel_money AS money FROM travel) a"
				+ " WHERE  status.`app_abb` IN (a.app_abb)";
		List<ApplyreimVo> list = new ArrayList<ApplyreimVo>();
		try {
			list = DBUtil.getQueryRunner().query(sql, new BeanListHandler<ApplyreimVo>(ApplyreimVo.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * @author 晓煜
	 */
	@Override
	public List<Swarthy> StatusFindPass() {
		// TODO Auto-generated method stub
		String sql = "SELECT t.month AS MONTH,COUNT(t.month) AS number " + " FROM "
				+ " (SELECT DATE_FORMAT(status.`status2_time`,'%m') AS MONTH " + " FROM  "
				+ " STATUS ,(SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%D')AS `month`)a, "
				+ " (SELECT DATE_FORMAT((CURDATE() - INTERVAL 11 MONTH), '%Y-%m-%D') AS `end`)b "
				+ " WHERE  status.`status_result`='通过' " + " AND  status.`status2_time`  BETWEEN b.end AND a.month) t "
				+ " GROUP BY t.month";
		List<Swarthy> swarthy = new ArrayList<Swarthy>();
		try {
			swarthy = DBUtil.getQueryRunner().query(sql, new BeanListHandler<Swarthy>(Swarthy.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return swarthy;
	}

	/**
	 * @author 晓煜
	 */
	@Override
	public List<Swarthy> StatusFindNotPassed() {
		// TODO Auto-generated method stub
		String sql = "SELECT t.month AS MONTH,COUNT(t.month) AS number " + " FROM "
				+ " (SELECT DATE_FORMAT(status.`status2_time`,'%m') AS MONTH " + " FROM  "
				+ " STATUS ,(SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%D')AS `month`)a, "
				+ " (SELECT DATE_FORMAT((CURDATE() - INTERVAL 11 MONTH), '%Y-%m-%D') AS `end`)b "
				+ " WHERE  status.`status2_time`  BETWEEN b.end AND a.month "
				+ " AND status.`status_result` <> '通过') t " + " GROUP BY t.month";
		List<Swarthy> swarthy = new ArrayList<Swarthy>();
		try {
			swarthy = DBUtil.getQueryRunner().query(sql, new BeanListHandler<Swarthy>(Swarthy.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return swarthy;
	}

}