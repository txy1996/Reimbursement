package com.zlt.system.dao.impl;

import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.ParameterizedType;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.dbutils.handlers.BeanListHandler;

import com.zlt.system.annotation.Bean;
import com.zlt.system.annotation.Column;
import com.zlt.system.annotation.Id;
import com.zlt.system.dao.CurrencyDao;
import com.zlt.system.util.DBUtil;

/**
 * 
 * @author 米邓勇
 * @date 2018/1/22
 * @explain Dao类，实现对于单表数据的操作
 * @param <T>
 */
public class CurrencyDaoImpl<T> implements CurrencyDao<T> {
	private Class<T> clazz;
	/**
	 * 获取到调用当前类的调用者类名
	 */
	@SuppressWarnings("unchecked")
	public CurrencyDaoImpl(){
		clazz = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}
	Connection conn = null;
	PreparedStatement pre = null;
	ResultSet rs = null;
	/**
	 * 失败的测试
	 */
	@SuppressWarnings("unchecked")
	public void test(){
		//Class clazz = t.getClass();
		String table = getTableName(clazz);
		System.out.println(clazz.getName());
		System.out.println(table);
		Field[] fields = clazz.getDeclaredFields();
		for(Field file:fields){
			if(file.isAnnotationPresent(Id.class)){
				System.out.println(file.getName()+"\t"+file.getAnnotation(Id.class).value());
			}else if(file.isAnnotationPresent(Column.class)){
				System.out.println(file.getName()+"\t"+file.getAnnotation(Column.class).value());
			}
		}
		String sql = "select * from "+table;
		List<Object> list = null;
		try {
			list = DBUtil.getQueryRunner().execute(sql, new BeanListHandler(clazz));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for(Object o:list){
			System.out.println(o);
		}
	}
	/**
	 * 
	 * @param t
	 * @return boolean 
	 * @explain 实现对于数据的更新操作
	 */
	@Override
	public boolean updata(T t){
		String tableName = getTableName(clazz);
		List<Object> fieldNames = new ArrayList<Object>();  //�ֶ���  
	    List<Object> fieldValues = new ArrayList<Object>(); //�ֶ�ֵ  
	    List<String> placeholders = new ArrayList<String>();//ռλ��  
	    Field[] fields = clazz.getDeclaredFields();
	    //��ȡid��������ֵ
		String idFieldName = "";  
        Object idFieldValue = "";
        for(Field field:fields){
			try {
				PropertyDescriptor pd = new PropertyDescriptor(field.getName(), clazz);
				if(field.isAnnotationPresent(Id.class)){
					idFieldName = field.getAnnotation(Id.class).value();  
	                idFieldValue = pd.getReadMethod().invoke(t); 
				}else if(field.isAnnotationPresent(Column.class)){
					fieldNames.add(field.getAnnotation(Column.class).value());  
	                fieldValues.add(pd.getReadMethod().invoke(t));  
	                placeholders.add("?");  
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
        fieldNames.add(idFieldName);  
        fieldValues.add(idFieldValue);  
        placeholders.add("?");  
        StringBuilder sql = new StringBuilder("");  
        sql.append("update ").append(tableName).append(" set ");  
        int index = fieldNames.size() - 1;  
        for (int i = 0; i < index; i++) {  
            sql.append(fieldNames.get(i)).append("=").append(placeholders.get(i)).append(",");  
        }  
        sql.deleteCharAt(sql.length()-1).append(" where ").append(fieldNames.get(index)).append("=").append("?");
        System.out.println(sql.toString());
        try {
        	conn = DBUtil.getConnection();
			pre = conn.prepareStatement(sql.toString());
			setParameter(fieldValues, pre);
			pre.execute();
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		return false;
	}
	/**
	 * 
	 * @param t
	 * @return boolean
	 * @explain 实现对于数据的插入操作，并返回布尔型值判断插入是否成功
	 */
	public boolean insert(T t){
		String table = getTableName(clazz);
		Field[] fiel = clazz.getDeclaredFields();
		StringBuilder fieldNames = new StringBuilder();//�ֶ���
		List<Object> values = new ArrayList<Object>();//�ֶ�ֵ
		StringBuilder placeHolders = new StringBuilder(); //ռλ��
		for(Field file:fiel){
			try {
				PropertyDescriptor pd = new PropertyDescriptor(file.getName(), clazz);
				if(file.isAnnotationPresent(Id.class)){
					fieldNames.append(file.getAnnotation(Id.class).value()).append(",");
					try {
						values.add(pd.getReadMethod().invoke(t));//��ö�����
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					placeHolders.append("?").append(","); 
				}else if(file.isAnnotationPresent(Column.class)){
					fieldNames.append(file.getAnnotation(Column.class).value()).append(",");
					try {
						values.add(pd.getReadMethod().invoke(t));
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					placeHolders.append("?").append(","); 
				}
			} catch (IntrospectionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		fieldNames.deleteCharAt(fieldNames.length()-1);  //ȥ�����Ķ���
		placeHolders.deleteCharAt(placeHolders.length()-1); 
		StringBuilder sql = new StringBuilder();
		sql.append("insert into ").append(table).append("(")
		.append(fieldNames.toString()).append(") values(").append(placeHolders.toString())
		.append(")");
		System.out.print(sql.toString());
		try {
			conn =DBUtil.getConnection();
			pre = conn.prepareStatement(sql.toString());
			setParameter(values, pre);
			pre.executeUpdate();
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		return false;
	}
	/**
	 * @return boolean
	 * 实现对数据的插入操作（不插入id）
	 */
	public boolean insert_NoID(T t){
		String table = getTableName(clazz);
		Field[] fiel = clazz.getDeclaredFields();
		StringBuilder fieldNames = new StringBuilder();//�ֶ���
		List<Object> values = new ArrayList<Object>();//�ֶ�ֵ
		StringBuilder placeHolders = new StringBuilder(); //ռλ��
		for(Field file:fiel){
			try {
				PropertyDescriptor pd = new PropertyDescriptor(file.getName(), clazz);
				if(file.isAnnotationPresent(Column.class)){
					fieldNames.append(file.getAnnotation(Column.class).value()).append(",");
					try {
						values.add(pd.getReadMethod().invoke(t));
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					placeHolders.append("?").append(","); 
				}
			} catch (IntrospectionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		fieldNames.deleteCharAt(fieldNames.length()-1);  //ȥ�����Ķ���
		placeHolders.deleteCharAt(placeHolders.length()-1); 
		StringBuilder sql = new StringBuilder();
		sql.append("insert into ").append(table).append("(")
		.append(fieldNames.toString()).append(") values(").append(placeHolders.toString())
		.append(")");
		System.out.print(sql.toString());
		try {
			conn =DBUtil.getConnection();
			pre = conn.prepareStatement(sql.toString());
			setParameter(values, pre);
			pre.executeUpdate();
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		return false;
	}
	/**
	 * 
	 * @param object
	 * @return boolean
	 * @explain 实现对于数据的删除操作，并返回布尔型值判断删除是否成功
	 */
	public boolean delete(Object object){
		String table = getTableName(clazz);
		Field[] files = clazz.getDeclaredFields();
		String typeid = null ;
		List<Object> values = new ArrayList<Object>();
		values.add((T) object);
		T obj = null;
		for(Field fiel:files){
			if(fiel.isAnnotationPresent(Id.class)){
				typeid = fiel.getAnnotation(Id.class).value();
			}
		}
		try {
			conn = DBUtil.getConnection();
			pre = conn.prepareStatement("delete from "+table+" where "+typeid+"=?");
			setParameter(values, pre);
			pre.executeUpdate();
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		return false;

	}
	/**
	 * 
	 * @param object
	 * @return T
	 * @explain 通过id查询数据，并返回泛型的数据
	 */
	public T findById(Object object){
		String table = getTableName(clazz);
		Field[] files = clazz.getDeclaredFields();
		String typeid = null ;
		List<Object> values = new ArrayList<Object>();
		values.add((T) object);
		T obj = null;
		for(Field fiel:files){
			if(fiel.isAnnotationPresent(Id.class)){
				typeid = fiel.getAnnotation(Id.class).value();
			}
		}
		try {
			conn = DBUtil.getConnection();
			pre = conn.prepareStatement("select * from "+table+" where "+typeid+"=?");
			setParameter(values, pre);
			rs = pre.executeQuery();
			while(rs.next()){
				try {
					obj = clazz.newInstance();
				} catch (InstantiationException | IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					initObject(obj, files, rs);
				} catch (IllegalAccessException | InvocationTargetException | IntrospectionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		
		return obj; 
	}
	public T findMaxId(){
		String table = getTableName(clazz);
		Field[] files = clazz.getDeclaredFields();
		T obj = null;
		String typeid = null ;
		for(Field fiel:files){
			if(fiel.isAnnotationPresent(Id.class)){
				typeid = fiel.getAnnotation(Id.class).value();
			}
		}
		String sql = "select * from "+table+" ORDER BY "+typeid+" DESC LIMIT 0,1";
		try {
			conn = DBUtil.getConnection();
			pre = conn.prepareStatement(sql);
			rs = pre.executeQuery();
			while(rs.next()){
				try {
					obj = clazz.newInstance();
				} catch (InstantiationException | IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					initObject(obj, files, rs);
				} catch (IllegalAccessException | InvocationTargetException | IntrospectionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		return obj;
	}
	/**
	 * 
	 * @return List<T>
	 * @explain 实现对于数据表中所有的数据的查询，并返回一个泛型的集合
	 */
	public List<T> findall() {
		
		String table = getTableName(clazz);
		String sql = "select * from "+table;
		List<T> list = null;
		Field[] fields = clazz.getDeclaredFields();//��ȡ�ֶζ���
		try {
			list = new ArrayList<T>();
			conn = DBUtil.getConnection();
			pre = conn.prepareStatement(sql);
			rs = pre.executeQuery();
			while(rs.next()){
				T obj = null;
				try {
					obj = clazz.newInstance();
				} catch (InstantiationException | IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}//����ʵ������
				try {
					initObject(obj, fields, rs);
				} catch (IllegalAccessException | InvocationTargetException | IntrospectionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				list.add(obj);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}finally{
			DBUtil.close(conn, pre, rs);
		}
		return list;
	}
	
	/**
	 * 
	 * @param clazz
	 * @return String
	 * @explain 通过此方法实现对于表名的获取
	 */
	 private String getTableName(Class<?> clazz) {  
	    	System.out.println(clazz.getSimpleName());
	    	Bean b = (Bean) clazz.getAnnotation(Bean.class);
	    	System.out.print(b);
	    	String v = b.value();
	    	return v;
	    }  
	 /**
	  * 
	  * @param rs
	  * @return String[]
	  * @throws Exception
	  * @explain 好像并没有使用到，并不知道具体的作用
	  */
	 private static String[] getColNames(ResultSet rs) throws Exception{
			ResultSetMetaData rsmd = rs.getMetaData();//  ��ȡ�� ResultSet ������еı�š����ͺ�����.�˷�������һ���ӿ�
			int count = rsmd.getColumnCount();//���ش� ResultSet �����е�������
			String[] colNames = new String[count];//������Ӧ����������
			for(int i=0;i<count;i++){
				colNames[i] = rsmd.getColumnLabel(i+1);// ��ȡ���ڴ�ӡ�������ʾ��ָ���еĽ�����⡣�˷������ص���String����
			}
			return colNames;//��������
		}
	 /**
	  * 
	  * @param t
	  * @param fields
	  * @param rs
	  * @throws SQLException
	  * @throws IntrospectionException
	  * @throws IllegalAccessException
	  * @throws InvocationTargetException
	  * 将查询返回的结果集输入到方法中，在方法中完成数据的添加
	  */
	 private void initObject(T t, Field[] fields, ResultSet rs)  
	            throws SQLException, IntrospectionException,  
	            IllegalAccessException, InvocationTargetException {  
	        for (Field field : fields) { //���forѭ���������ڰ�ֵ����ʵ�����С�
	        	String propertyName = field.getName();
	            String columnName = "";  
	            if(field.isAnnotationPresent(Id.class)){
	            	columnName = field.getAnnotation(Id.class).value();
	            }else if(field.isAnnotationPresent(Column.class)){
	            	columnName = field.getAnnotation(Column.class).value();
	            }
	            Object paramVal = null;  
	            Class<?> clazzField = field.getType();  
	            if (clazzField == String.class) {  
	                paramVal = rs.getString(columnName);  
	            } else if (clazzField == short.class || clazzField == Short.class) {  
	                paramVal = rs.getShort(columnName);  
	            } else if (clazzField == int.class || clazzField == Integer.class) {  
	                paramVal = rs.getInt(columnName);  
	            } else if (clazzField == long.class || clazzField == Long.class) {  
	                paramVal = rs.getLong(columnName);  
	            } else if (clazzField == float.class || clazzField == Float.class) {  
	                paramVal = rs.getFloat(columnName);  
	            } else if (clazzField == double.class || clazzField == Double.class) {  
	                paramVal = rs.getDouble(columnName);  
	            } else if (clazzField == boolean.class || clazzField == Boolean.class) {  
	                paramVal = rs.getBoolean(columnName);  
	            } else if (clazzField == byte.class || clazzField == Byte.class) {  
	                paramVal = rs.getByte(columnName);  
	            } else if (clazzField == char.class || clazzField == Character.class) {  
	                paramVal = rs.getCharacterStream(columnName);  
	            } else if (clazzField == Date.class) {  
	                paramVal = rs.getTimestamp(columnName);  
	            } else if (clazzField.isArray()) {  
	                paramVal = rs.getString(columnName).split(",");   //�Զ��ŷָ����ַ���  
	            }   
	            PropertyDescriptor pd = new PropertyDescriptor(propertyName,t.getClass());  
	            pd.getWriteMethod().invoke(t, paramVal);  
	        }  
	    } 
	 /**
	  * 
	  * @param values
	  * @param ps
	  * @throws SQLException
	  * @explain 将集合数据通过循环的方式输入到PreparedStatement中实现参数的输入
	  */
	 private void setParameter(List<Object> values,PreparedStatement ps) throws SQLException{
			for(int i=1;i<=values.size();i++){
				Object fieldValue = values.get(i-1);
				if(fieldValue != null){
					Class clazzValue = fieldValue.getClass();
					if(clazzValue == String.class){
						ps.setString(i, (String)fieldValue);
					} else if (clazzValue == boolean.class || clazzValue == Boolean.class) {  
		                ps.setBoolean(i, (Boolean)fieldValue);  
		            } else if (clazzValue == byte.class || clazzValue == Byte.class) {  
		                ps.setByte(i, (Byte)fieldValue);  
		            } else if (clazzValue == char.class || clazzValue == Character.class) {  
		                ps.setObject(i, fieldValue,Types.CHAR);  
		            } else if (clazzValue == Date.class) {  
		                ps.setTimestamp(i, new Timestamp(((Date) fieldValue).getTime()));  
		            } else if (clazzValue.isArray()) {  
		                Object[] arrayValue = (Object[]) fieldValue;  
		                StringBuffer sb = new StringBuffer();  
		                for (int j = 0; j < arrayValue.length; j++) {  
		                    sb.append(arrayValue[j]).append("、");  
		                }  
		                ps.setString(i, sb.deleteCharAt(sb.length()-1).toString());  
		            } else {  
		                ps.setObject(i, fieldValue, Types.NUMERIC);  
		            }  
				}else{
					ps.setObject(i, null);
				}
				
			}
		}
}
